# -*- coding: utf-8 -*-
"""image-classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KGEGomqCbYTqus4mF1LPggOe-_IamWl4
"""

#mengambil dataset dengan wget
!wget --no-check-certificate\
  https://dicodingacademy.blob.core.windows.net/picodiploma/ml_pemula_academy/rockpaperscissors.zip

pip install split_folders

import tensorflow as tf
import zipfile, os

#melakukan extract pada zip file
local_zip      = 'rockpaperscissors.zip'
zip_ref        = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp')
zip_ref.close()

os.listdir('/tmp/rockpaperscissors/rps-cv-images')

import splitfolders
base_dir = '/tmp/rockpaperscissors/rps-cv-images'

train_dir = os.path.join('/tmp/rockpaperscissors', 'train')
validation_dir = os.path.join('/tmp/rockpaperscissors', 'val')

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(
    rescale = 1./255,
    rotation_range = 20,
    horizontal_flip = True,
    shear_range = 0.2,
    fill_mode = 'wrap',
    validation_split = 0.4
)

train_generator = train_datagen.flow_from_directory(
    base_dir,
    target_size = (150, 150),
    batch_size = 4,
    shuffle = True,
    subset = 'training',
    class_mode = 'categorical'
)

validation_generator = train_datagen.flow_from_directory(
    base_dir,
    target_size = (150, 150),
    batch_size = 4,
    shuffle = True,
    subset = 'validation',
    class_mode = 'categorical'
)

model = tf.keras.models.Sequential([
                                    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),
                                    tf.keras.layers.MaxPooling2D(2, 2),
                                    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
                                    tf.keras.layers.MaxPooling2D(2, 2),
                                    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
                                    tf.keras.layers.MaxPooling2D(2, 2),
                                    tf.keras.layers.Conv2D(256, (3,3), activation='relu'),
                                    tf.keras.layers.MaxPooling2D(2, 2),
                                    tf.keras.layers.Flatten(),
                                    tf.keras.layers.Dense(512, activation='relu'),
                                    tf.keras.layers.Dense(3, activation='softmax')
])

#pembuatan model
model.compile(optimizer = tf.optimizers.Adam(),
              loss='categorical_crossentropy',
              metrics=['accuracy'])

#pelatihan model
model.fit(
    train_generator,
    steps_per_epoch=25,
    epochs = 20,
    validation_data = validation_generator,
    validation_steps = 5,
    )

# Commented out IPython magic to ensure Python compatibility.
    import numpy as np
    from google.colab import files
    from keras.preprocessing import image
    import matplotlib.pyplot as plt
    import matplotlib.image as mpimg
#     %matplotlib inline
     
    uploaded = files.upload()
    pred_indices = train_generator.class_indices
     
    for fn in uploaded.keys():
     
      # proses prediksi
      path = fn
      img = image.load_img(path, target_size=(150,150))
      imgplot = plt.imshow(img)
      x = image.img_to_array(img)
      x = np.expand_dims(x, axis=0)
     
      images = np.vstack([x])
      classes = model.predict(images, batch_size=10)
      output_class = np.argmax(classes)
      print(fn)
      if output_class==0:
          print('paper')
      elif output_class==1:
          print('rock')
      else:
          print('scissors')

